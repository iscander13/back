package com.example.backend.util;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.example.backend.dto.ChapterDto;
import com.example.backend.dto.CropDto;
import com.example.backend.dto.VarietyDto;

public class ExcelCropParser {

    public static List<ChapterDto> parse(String resourcePath) {
        System.out.println("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ Excel: " + resourcePath);

        List<ChapterDto> chapters = new ArrayList<>();

        try (InputStream is = ExcelCropParser.class.getClassLoader().getResourceAsStream(resourcePath);
             Workbook workbook = new XSSFWorkbook(is)) {

            Sheet sheet = workbook.getSheetAt(0);

            ChapterDto currentChapter = null;
            CropDto currentCrop = null;

            for (Row row : sheet) {
                if (row.getRowNum() < 2) continue; // –≠—Ç–æ –º—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∏
                Cell firstCell = row.getCell(0);
                if (firstCell == null) continue;
                String cellText = getString(firstCell);

                // DEBUG: –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏ A

                if (cellText.startsWith("–ì–ª–∞–≤–∞")) {
                    currentChapter = new ChapterDto();
                    currentChapter.setTitle(cellText.replaceFirst("–ì–ª–∞–≤–∞ \\d+\\. ?", "").trim());
                    currentChapter.setCrops(new ArrayList<>());
                    chapters.add(currentChapter);
                    currentCrop = null;

                } else if (cellText.startsWith("–ü–∞—Ä–∞–≥—Ä–∞—Ñ")) {
                    currentCrop = new CropDto();
                    currentCrop.setName(cellText.replaceFirst("–ü–∞—Ä–∞–≥—Ä–∞—Ñ \\d+\\. ?", "").trim());
                    currentCrop.setVarieties(new ArrayList<>());
                    if (currentChapter != null) {
                        currentChapter.getCrops().add(currentCrop);
                    } 

                } else if (cellText.matches("\\d+\\.?")) { // "1." –∏–ª–∏ "1"
                    try {
                        int number = Integer.parseInt(cellText.replace(".", "").trim());
                        String name = getString(row.getCell(3)); // D
                        String region = getString(row.getCell(5)); // F

                        if (currentCrop != null && name != null && !name.isBlank()) {
                            VarietyDto variety = new VarietyDto();
                            variety.setNumber(number);
                            variety.setName(name);
                            variety.setRegion(region);
                            currentCrop.getVarieties().add(variety);
                            // DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Å–æ—Ä—Ç –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É
                        } else if (currentCrop == null) {
                             System.out.println("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –°–æ—Ä—Ç '" + name + "' –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ü–∞—Ä–∞–≥—Ä–∞—Ñ–∞!");
                        } else if (name == null || name.isBlank()) {
                             System.out.println("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –°–æ—Ä—Ç –±–µ–∑ –∏–º–µ–Ω–∏: " + cellText);
                        }
                    } catch (Exception e) {
                        System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ (—Å–æ—Ä—Ç): " + e.getMessage() + " –≤ —è—á–µ–π–∫–µ A" + (row.getRowNum() + 1));
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel: " + resourcePath);
            e.printStackTrace();
        }

        // DEBUG: –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        System.out.println("‚û°Ô∏è –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤: " + chapters.size());
        return chapters;
    }

    private static String getString(Cell cell) {
        return cell == null ? null : cell.toString().trim();
    }
}
